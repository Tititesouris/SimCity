breed [cursors cursor]
cursors-own [
  cursor-was-down? ; Whether or not the mouse button was down during the previous tick
  cursor-click-down? ; True only during the tick when the mouse button is pressed
  cursor-click-up? ; True only during the tick when the mouse button is released
  cursor-down? ; Whether or not the mouse button is down (same as mouse-down? but doesn't change mid-tick)
  correctColor ; Color of the cursor when it can interact
  incorrectColor ; Color of the cursor when it cannot interact
  tools ; Tools available
  activeTool ; Tool currently selected
  selectedPatch ; Patch selected. Different uses based on the active tool
  cost ; Cost of the thing being done before it is confirmed
]

to initCursor
  set cursor-was-down? false
  set correctColor green
  set incorrectColor red
  let :noneTool (list [[] -> cursorSelectIntersection] [[] -> doNothing] [[] -> doNothing] [[] -> setCorrectColor])
  let :roadTool (list [[] -> markSelectedPatch] [[] -> cursorRoadClickUp] [[] -> cursorRoadDown] [[] -> cursorRoadUp])
  let :houseTool (list [[] -> markSelectedPatch] [[] -> cursorHouseClickUp] [[] -> rectangleSelectionNextToRoads 0] [[] -> setCorrectColor])
  let :businessTool (list [[] -> markSelectedPatch] [[] -> cursorBusinessClickUp] [[] -> rectangleSelectionNextToRoads 0] [[] -> setCorrectColor])
  let :powerplantTool (list [[] -> markSelectedPatch] [[] -> cursorPowerplantClickUp] [[] -> rectangleSelectionNextToRoads powerplantPrice] [[] -> setCorrectColor])
  let :pumpTool (list [[] -> markSelectedPatch] [[] -> cursorPumpClickUp] [[] -> rectangleSelectionNextToRoads pumpPrice] [[] -> setCorrectColor])
  set tools (list :noneTool :roadTool :houseTool :businessTool :powerplantTool :pumpTool)
  set activeTool 0
  set selectedPatch nobody
  
  set size 0.5
  set color incorrectColor
  set heading 0
end

to updateCursor
  setxy mouse-xcor mouse-ycor
  set cursor-down? mouse-down?
  set cursor-click-down? cursor-down? and (not cursor-was-down?)
  set cursor-click-up? (not cursor-down?) and cursor-was-down?
  
  let :guiElements guielements in-radius 1
  ifelse any? :guiElements [
    updateCursorGUIEvents :guiElements
  ][
    updateCursorEvents
  ]
  
  set cursor-was-down? cursor-down?
end

to updateCursorGUIEvents [:guiElements]
  if cursor-click-down? [
      ask :guiElements [
        ask other guielements [set color gray]
        set color blue
        ask myself [
          set activeTool [tool] of myself
          set shape [shape] of myself
        ]
      ]
    ]
end

to updateCursorEvents
  let :event [[:x :y] -> ]
  ifelse cursor-click-down? [
    set :event item 0 (item activeTool tools)
  ][
    ifelse cursor-click-up? [
      set :event item 1 (item activeTool tools)
    ][
      ifelse cursor-down? [
        set :event item 2 (item activeTool tools)
      ][
        set :event item 3 (item activeTool tools)
      ]
    ]
  ]
  (run :event xcor ycor)
end

to doNothing
end

to markSelectedPatch
  if color = correctColor [
    set selectedPatch patch-here
  ]
end

to rectangleSelectionNextToRoads [:price]
  if selectedPatch != nobody [
    ask planners [die]
    let :patch patch-here
    let xA [pxcor] of selectedPatch
    let yA [pycor] of selectedPatch
    let xB [pxcor] of :patch
    let yB [pycor] of :patch
    
    let :validPatches patches with [
      pcolor != roadColor and pcolor != highwayColor and
      (min list xA xB) <= pxcor and pxcor <= (max list xA xB) and (min list yA yB) <= pycor and pycor <= (max list yA yB) and
      (any? neighbors4 with [pcolor = roadColor])
    ]
    ask :validPatches [sprout-planners 1 [initPlanners]]
    set cost :price * (count planners)
  ]
end

to setCorrectColor
  set color correctColor
end

to cursorSelectIntersection
  ifelse selectedPatch = nobody [
    if any? intersections-here [
      set selectedPatch patch-here
      ask ([directions] of (one-of intersections-here)) [
        sprout-planners 1 [initPlanners]
      ]
    ]
  ][
    ifelse patch-here = selectedPatch [
      ask patch-here [
        ask intersections-here [die]
        if count planners > 0 [
          let :north any? planners-at 0 1
          let :east any? planners-at 1 0
          let :south any? planners-at 0 -1
          let :west any? planners-at -1 0
          sprout-intersections 1 [initIntersection pxcor pycor :north :east :south :west]
        ]
      ]
      ask planners [die]
      set selectedPatch nobody
    ][
      ask patch-here [
        if (distance [selectedPatch] of myself) <= 1 [
          ifelse any? planners-here [
            ask planners-here [die]
          ][
            sprout-planners 1 [initPlanners]
          ]
        ]
      ]
    ]
  ]
end

to cursorRoadClickUp
  if selectedPatch != nobody [
    if count planners > 1 [
      ask planners [
        ask houses-here [moveOut]
        ask businesses-here [closeDown]
        ask powerplants-here [die]
        ask pumps-here [die]
        ask patch-here [
          ask intersections-here [die]
          if pcolor != highwayColor [
            set pcolor roadColor
          ]
          
          let :roadPatches patches in-radius 1 with [(pcolor = roadColor or pcolor = highwayColor) and not any? planners-here]
          if any? :roadPatches [
            let :north (any? planners-at 0 1) or (member? (patch-at 0 1) :roadPatches)
            let :east (any? planners-at 1 0) or (member? (patch-at 1 0) :roadPatches)
            let :south (any? planners-at 0 -1) or (member? (patch-at 0 -1) :roadPatches)
            let :west (any? planners-at -1 0) or (member? (patch-at -1 0) :roadPatches)
            sprout-intersections 1 [initIntersection pxcor pycor :north :east :south :west]
          ]
        ]
      ]
    ]
    set money money - cost
    set cost 0
    ask planners [die]
    set selectedPatch nobody
  ]
end

to cursorRoadDown
  if selectedPatch != nobody [
    ask planners [die]
    let :patch patch-here
    let xA [pxcor] of selectedPatch
    let yA [pycor] of selectedPatch
    let xB [pxcor] of :patch
    let yB [pycor] of :patch
    
    ifelse (abs (yB - yA)) <= (abs (xB - xA)) [
      ask patches with [pycor = yA and (min list xA xB) <= pxcor and pxcor <= (max list xA xB)] [sprout-planners 1 [initPlanners]]
    ][
      ask patches with [pxcor = xA and (min list yA yB) <= pycor and pycor <= (max list yA yB)] [sprout-planners 1 [initPlanners]]
    ]
    set cost roadPrice * (count planners)
  ]
end

to cursorRoadUp
  ifelse member? ([pcolor] of patch-here) (list roadColor highwayColor) [
    set color correctColor
  ][
    set color incorrectColor
  ]
end

to cursorHouseClickUp
  if selectedPatch != nobody [
    ask planners [
      ask patch-here [set pcolor houseZoneColor]
      ask businesses-here [closeDown]
      ask powerplants-here [die]
      ask pumps-here [die]
    ]
    ask planners [die]
    set selectedPatch nobody
  ]
end

to cursorBusinessClickUp
  if selectedPatch != nobody [
    ask planners [
      ask patch-here [set pcolor businessZoneColor]
      ask houses-here [moveOut]
      ask powerplants-here [die]
      ask pumps-here [die]
    ]
    ask planners [die]
    set selectedPatch nobody
  ]
end

to cursorPowerplantClickUp
  if selectedPatch != nobody [
    ask planners [
      ask patch-here [set pcolor terrainColor]
      ask houses-here [moveOut]
      ask businesses-here [closeDown]
      ask pumps-here [die]
      hatch-powerplants 1 [initPowerplant xcor ycor 100]
    ]
    set money money - cost
    set cost 0
    ask planners [die]
    set selectedPatch nobody
  ]
end

to cursorPumpClickUp
  if selectedPatch != nobody [
    ask planners [
      ask patch-here [set pcolor terrainColor]
      ask houses-here [moveOut]
      ask businesses-here [closeDown]
      ask powerplants-here [die]
      hatch-pumps 1 [initPump xcor ycor 100]
    ]
    set money money - cost
    set cost 0
    ask planners [die]
    set selectedPatch nobody
  ]
end