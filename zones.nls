to loadHouseZones
  file-open "house_zones.txt"
  while [not file-at-end?] [
    let :x file-read
    let :y file-read
    ask patch :x :y [set pcolor houseZoneColor]
  ]
  file-close
end

to saveHouseZones
  carefully [file-delete "house_zones.txt"][]
  file-open "house_zones.txt"
  ask patches with [pcolor = houseZoneColor] [
    file-print (word pxcor " " pycor)
  ]
  file-close
end

to loadBusinessZones
  file-open "business_zones.txt"
  while [not file-at-end?] [
    let :x file-read
    let :y file-read
    ask patch :x :y [set pcolor businessZoneColor]
  ]
  file-close
end

to saveBusinessZones
  carefully [file-delete "business_zones.txt"][]
  file-open "business_zones.txt"
  ask patches with [pcolor = businessZoneColor] [
    file-print (word pxcor " " pycor)
  ]
  file-close
end

to updateHouseZone
  if not any? houses-here [
    let :movingtruckAround one-of movingtrucks in-radius 1.5 with [movingIn]
    if :movingtruckAround != nobody [
      let :passengers [passengers] of :movingtruckAround
      sprout-houses 1 [
        initHouse xcor ycor (count :passengers)
        ask :passengers [
          set residence myself
          move-to myself
        ]
      ]
      ask :movingtruckAround [movingtruckDropOff :passengers]
    ]
  ]
end

to updateBusinessZone
  if not any? businesses-here [
    let :carAround one-of cars in-radius 1.5
    if :carAround != nobody [
      let :unemployedPassengers ([passengers] of :carAround) with [employer = nobody]
      if any? :unemployedPassengers [
        sprout-businesses 1 [
          initBusiness xcor ycor (count :unemployedPassengers)
          ask :unemployedPassengers [
            set employer myself
            move-to myself
          ]
        ]
        ask :carAround [carDropOff :unemployedPassengers]
      ]
    ]
  ]
end