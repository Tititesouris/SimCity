globals [
  dayLength ; Number of ticks in a day
  hourLength ; Number of ticks in an hour
  time ; Current tick of the day
  timeReleaseOffers ; Number of ticks to wait after a new day starts for businesses to release offers
  timeLeaveHome ; Number of ticks to wait after a new day starts for people to leave their home to go work
  timeLeaveWork ; Number of ticks to wait after a new day starts for people to leave work to go home
  timeSleep ; Number of ticks to wait after a new day starts for people to go to sleep

  money ; How much money the player has
  roadprice ; Base price of a patch of road
  powerplantPrice ; Base price of a powerplant
  pumpPrice ; Base price of a pump
  
  offerSpeed ; Speed of offers
  vehicleSpeed ; Speed of vehicles
  resourceSpeed ; Speed of electricity and water

  labelColor ; Color of labels
  terrainColor ; Color of the terrain
  highwayColor ; Color of the highway
  roadColor ; Color of the road
  houseColor ; Base color of a house
  businessColor ; Base color of a business
  houseZoneColor ; Color of a house zone
  businessZoneColor ; Color of a business zone

  warningEmployement ; Warning sign when employement is not satisfying
  warningWorkforce ; Warning sign when the workforce is not satisfying
  warningElectricity ; Warning sign when missing electricity
  warningWater ; Warning sign when missing water
  
  gui-ready? ; Whether or not the UI has been setup correctly
]

to-report clock
  let :hours floor (time / hourLength)
  let :minutes floor ((time / hourLength - :hours) * 60)
  if :hours < 10 [
    set :hours (word "0" :hours)
  ]
  if :minutes < 10 [
    set :minutes (word "0" :minutes)
  ]
  report (word :hours "h" :minutes)
end

to-report calendar
  let :years floor (ticks / (12 * 4 * 7 * dayLength))
  let :year 2000 + :years
  
  let :months (floor (ticks / (4 * 7 * dayLength))) mod 12
  let :month item :months ["January" "February" "March" "April" "May" "June" "July" "August" "September" "October" "November" "December"]
  
  let :days ((floor (ticks / dayLength)) mod 30) + 1
  let :day (word :days "th")
  ifelse :days = 1 [
    set :day (word :days "st")
  ][
    ifelse :days = 2 [
      set :day (word :days "nd")
    ][
      if :days = 3 [
        set :day (word :days "rd")
      ]
    ]
  ]
  
  report (word :month " " :day " " :year)
end

to-report formatNumber [:number]
  let :numberString (word :number)
  let :formattedNumber :numberString
  let i 0
  while [i < floor((length :numberString - 1) / 3)] [
    set :formattedNumber insert-item ((length :numberString) - ((i + 1) * 3)) :formattedNumber " "
    set i i + 1
  ]
  report :formattedNumber
end

to-report getCost
  let :cursor one-of cursors
  ifelse any? cursors [
    report sum [cost] of cursors
  ][
    report 0
  ]
end

to wiggle [:angle :speed]
  ifelse ticks mod (2 * :angle) >= :angle [
    set heading heading - :speed
  ][
    set heading heading + :speed
  ]
end