to initRoamingAgent [:x :y :speed :reach]
  setxy :x :y
  set speed :speed
  set reach :reach

  face one-of neighbors4 with [pcolor = roadColor]
  set size 1
end

to updateRoamingAgent [:roamingAgentIntersectionBehavior]
  ifelse reach > 0 [
    fd speed
    set reach reach - 1
    if distance patch-here < (speed / 2) [
      move-to patch-here

      let :intersection one-of intersections-here
      ifelse :intersection != nobody [
        (run :roamingAgentIntersectionBehavior :intersection)
      ][
        let :patchAhead patch-ahead 1
        if (:patchAhead = nobody) or ([pcolor] of :patchAhead != roadColor) [
          let :directions no-patches
          ask patch-here [set :directions neighbors4 with [pcolor = roadColor]]
          if any? :directions [
            face one-of :directions
          ]
        ]
      ]
    ]
  ][
    die
  ]
end

to randomIntersectionBehavior [:intersection]
  let :patchBehind patch-ahead -1
  let :directions ([directions] of :intersection) with [self != :patchBehind]
  let :direction one-of :directions
  if :direction != nobody [
    face :direction
  ]
end

to cloneIntersectionBehavior [:intersection]
  let :resources (turtle-set offers electricities waters) with [group = [group] of myself]
  ifelse member? :intersection visitedIntersections [
    ifelse count :resources > 1 [
      die
    ][
      set visitedIntersections no-turtles
    ]
  ][
    ask :resources [set visitedIntersections (turtle-set visitedIntersections :intersection)]

    let :directions [directions] of :intersection
    if any? :directions [
      let :mainDirection one-of :directions
      set :directions :directions with [self != :mainDirection]
      face :mainDirection
      ask :directions [ask myself [let :direction myself hatch 1 [face :direction fd speed]]]
    ]
  ]
end