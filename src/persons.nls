breed [persons person]
persons-own [
  residence ; House this person lives in. -1 if looking to move in
  employer ; Business this person works for. -1 if unemployed
  startUnemployed ; Tick on which the person started being unemployed
  startEmployed ; Tick on which the person got hired
  salary ; How much the person is paid every day
  happiness ; Happiness of the person
]

to initPerson [:residence]
  set residence :residence
  set employer nobody
  set startUnemployed ticks
  set startEmployed 0
  set salary 0
  
  set color (30 + random 10)
end

to updatePerson
  ifelse employer != nobody [
    let :weekLength 7 * dayLength
    let :nbWeeksEmployed floor ((ticks - startEmployed) / :weekLength)
    set salary baseSalary + maxSalaryIncrease * (:nbWeeksEmployed / (12 * 4))
  ][
    set salary 0
  ]
  
  updatePersonHappiness
end

to updatePersonHappiness
  ifelse employer = nobody [
    set happiness 75 - floor ((ticks - startUnemployed) / (3 * hourLength))
  ][
    set happiness 50 + (salary / (baseSalary + maxSalaryIncrease)) * 50
    set happiness happiness - 100 * incomeTaxRate
  ]
  set happiness clamp happiness 0 100
  
  if happiness < 30 and random dayLength * happiness = 0 [
    die
  ]
end