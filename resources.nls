breed [electricities electricity]
electricities-own [
  speed ; Movement speed of the electricity
  reach ; Number of ticks the electricity is still active for
  amount ; Amount of electricity in kW
  group ; ID of the group this electricity belongs to
  visitedIntersections ; Intersections visited by this electricity
]

breed [waters water]
waters-own [
  speed ; Movement speed of the water
  reach ; Number of ticks the water is still active for
  amount ; Amount of water in L
  group ; ID of the group this water belongs to
  visitedIntersections ; Intersections visited by this water
]

to initResource [:x :y :reach :amount]
  initRoamingAgent :x :y resourceSpeed :reach
  set amount :amount
  set group who
  set visitedIntersections no-turtles
end

to updateResource
  updateRoamingAgent [[:intersection] -> (cloneIntersectionBehavior :intersection)]
end

to randomIntersectionBehavior [:intersection]
  let :directions [directions] of :intersection
  set :directions remove patch-ahead -1 :directions
  let :direction one-of :directions
  if :direction != nobody [
    face :direction
  ]
end

to cloneIntersectionBehavior [:intersection]
  let :resources (turtle-set offers electricities waters) with [group = [group] of myself]
  ifelse member? :intersection visitedIntersections [
    ifelse count :resources > 1 [
      die
    ][
      set visitedIntersections no-turtles
    ]
  ][
    ask :resources [set visitedIntersections (turtle-set visitedIntersections :intersection)]

    let :directions [directions] of :intersection
    if not empty? :directions [
      face item 0 :directions
      set :directions remove-item 0 :directions
      ask patch-set :directions [ask myself [let :direction myself hatch 1 [face :direction fd speed]]]
    ]
  ]
end

to-report resourceText
  report amount
end